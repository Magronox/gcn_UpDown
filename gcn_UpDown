using SparseArrays, LinearAlgebra, Random




  

function lsm(x::Union{Vector{Float64},Matrix{Float64}})
    log.(exp.(x)/sum(exp.(x)))
end

function ReLU(x::Union{Matrix, Vector})
    Int.(x.>0).*x
end

function nll_loss(z_opt,z)
    -z[z_opt]
end

### Not optimized simple versions:


function gcn(A::SparseMatrixCSC, X::Matrix, idx::Int64, layer::Int64, activations, Ws... )
    d = sum(A, dims = 2)
    if layer == 1
        W = first(Ws)
        return W*sum(X[:,rowvals(A)[nzrange(A,idx)]]*Diagonal(1 ./sqrt.(d[idx]*d[rowvals(A)[nzrange(A,idx)]])), dims = 2)
    else
        Ws , W = Ws
        temp = zeros(size(W,1))
        activation = pop!(activations)
        for j in rowvals(A)[nzrange(A,idx)]
            temp += W * activation(gcn(A,X,j, layer - 1, activations, Ws))/sqrt(d[idx]*d[j])
            
        end
        return temp

    end
end
  
function raw_gd_W2!(A::SparseMatrixCSC, X::Matrix, W1::Matrix{Float64}, W2::Matrix{Float64}, idx::Int64, z_opt::Vector{Bool} ,alpha::Float64)
    d = sum(A, dims = 2)
    m,~ = size(W1) 
    k = size(W2,1)
    temp = zeros(k*m)
    m_i = lsm(gcn(A,X,idx,2, [ReLU], W1,W2))
    for j in rowvals(A)[nzrange(A,idx)]
        temp += 1/sqrt(d[idx]*d[j])* kron(gcn(A,X,j,1,~,W1),I(k))*(I(k)-exp.(m_i)*ones(k)')*(-z_opt)
    end

    W2[:] -= alpha*temp[:]
    W2
end

function raw_gd_W1!(A::SparseMatrixCSC, X::Matrix, W1::Matrix{Float64}, W2::Matrix{Float64}, idx::Int64, z_opt::Vector{Bool}, alpha::Float64)
    d = sum(A, dims = 2)
    m,p = size(W1)
    k = size(W2,1)
    temp = zeros(m*p)
    m_i = lsm(gcn(A,X,idx,2,[ReLU],W1,W2))
    dl = exp.(m_i)*ones(k)'
    for j in rowvals(A)[nzrange(A,idx)]
        temp2 = zeros(m*p,m)
        for v in rowvals(A)[nzrange(A,j)]
            temp2 += kron(X[:,v],I(m))/sqrt(d[j]*d[v])
        end
        temp += temp2*Diagonal(vec(gcn(A,X,idx,1,[],W1).>0))*W2'*dl*(-z_opt)/sqrt(d[idx]*d[j])
    end

    W1[:] -= alpha*temp[:]
    W1
end
###### test
n = 10
p = 6
m = 5
k = 4
idx = 1
A = sprand(Bool,n,n,0.4)
A = triu(A)
A = A + A'
A[diagind(A)] .= 1
X = rand(p,n)
W1 = rand(m,p)
W2 = rand(k,m)
z_opt = zeros(Bool,k)
z_opt[k-1] = 1
nll_loss(z_opt,lsm(gcn(A,X,idx,2,[ReLU],W1,W2)))


#### Batched version -- not using matrices

L1 = Dict{}
L2 = Dict{}

